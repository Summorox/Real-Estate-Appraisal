/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package rules
import pt.ipp.isep.model.RealEstate;
import pt.ipp.isep.model.Evaluation;
import java.util.Calendar;
import pt.ipp.isep.service.EvaluationService
import pt.ipp.isep.model.RealEstateItem;
import pt.ipp.isep.explanation.How
import pt.ipp.isep.explanation.Justification
import pt.ipp.isep.explanation.Fact;
global EvaluationService evaluationService;

function int currentYear(){
  return Calendar.getInstance().get(Calendar.YEAR);
}


rule "r1: Value of the property should depreciate per year"
lock-on-active true
when
    $realEstate: RealEstate()
    eval($realEstate.getConstructionYear() < currentYear())
	$evaluation: Evaluation()
then
    long modifier = evaluationService.appraiseConstructionYear($realEstate.getConstructionYear(), $evaluation.getBaseValue());
    long calculatedValue = $evaluation.getAppraiseValue()+modifier;
    $evaluation.setAppraiseValue(calculatedValue);
    int age= currentYear()-$realEstate.getConstructionYear();
    Justification j = Justification.builder()
        .ruleDesc("r1: Value of the property should depreciate per year")
        .fact(
            Fact.builder()
            .value(modifier)
            .description("Because the property is " + age + " years old")
            .build()
        ).build();
    How.addJustification($realEstate.getId(),j);

    update($evaluation);
end

rule "r2: Value of the property should appreciate per parking spot"
lock-on-active true
when
	$realEstate: RealEstate(parkingSlot > 0)
	$evaluation: Evaluation()
then
    long modifier = evaluationService.appraiseParkingSlots($realEstate.getParkingSlot(), $evaluation.getBaseValue());
    long calculatedValue = $evaluation.getAppraiseValue()+modifier;
    $evaluation.setAppraiseValue(calculatedValue);
    Justification j = Justification.builder()
            .ruleDesc("r2: Value of the property should appreciate per parking spot")
            .fact(
                Fact.builder()
                .value(modifier)
                .description("Because the property has " + $realEstate.getParkingSlot() + " parking slots")
                .build()
            ).build();
        How.addJustification($realEstate.getId(),j);

    update($evaluation);
end

rule "r3: Value of the property should appreciate per bathroom"
lock-on-active true
when
	$realEstate: RealEstate(numberBathrooms > 0)
	$evaluation: Evaluation()
then
        long modifier = evaluationService.appraiseBathrooms($realEstate.getNumberBathrooms(),$evaluation.getBaseValue());
        long calculatedValue = $evaluation.getAppraiseValue()+modifier;
        $evaluation.setAppraiseValue(calculatedValue);
         Justification j = Justification.builder()
                    .ruleDesc("r3: Value of the property should appreciate per bathroom")
                    .fact(
                        Fact.builder()
                        .value(modifier)
                        .description("Because the property has " + $realEstate.getNumberBathrooms() + " bathrooms")
                        .build()
                    ).build();
                How.addJustification($realEstate.getId(),j);

        update($evaluation);
end

rule "r4: Value of the property should appreciate or depreciate accordingly per item that it has"
lock-on-active true
when
	$realEstate: RealEstate($itemList: realEstateItemList, $itemList !=null && $itemList.size()>0)
	$evaluation: Evaluation()
then
    for (RealEstateItem item: $realEstate.getRealEstateItemList()) {
        long modifier = evaluationService.appraiseItem(item,$evaluation.getBaseValue());
        long calculatedValue = $evaluation.getAppraiseValue()+modifier;
        $evaluation.setAppraiseValue(calculatedValue);
        Justification j = Justification.builder()
                            .ruleDesc("r4: Value of the property should appreciate or depreciate accordingly per item that it has")
                            .fact(
                                Fact.builder()
                                .value(modifier)
                                .description("Because the property has the item: " + item.getItem().getDescription())
                                .build()
                            ).build();

        How.addJustification($realEstate.getId(),j);
    }

    update($evaluation);

end
